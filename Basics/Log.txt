(1) Random:
-----------
-> Println terminates current line, or adds an end-of-line character, whereas Print doesn't. 
-> 'Char' data type here refers to only alphabet ('a','@'..etc) whereas names etc are defined by 'String'. (S capital always)
-> Typecasting is done like:
   double var = 5.5;
   int newvar = (int) var; // typecast double type into int for var. // print(newvar) -> 5 ; print(var) -> 5.5
-> 'final' keyword is used to avoid changes. (constant value)
    Eg: Public class Mathematics { final double pi=3.14; }
-> Comments: (a)// valid (b)/* valid */ (c)/** valid */ (javadocs)
-> Shortcut assignment works. Eg: x^=3 ; x%=3 ; x&=3 etc.
-> Can concat strings with + directly on assignment.
-> import packages like:
   import package->class like import java.util.Scanner;
   or 
   import package->all contents/classes like import java.util.*;
-> Class names preferred with uppercased initial whereas packages prefer lowercased initial.
-> Escape characters: \n (newline) \t (tab space) \b (backspace) \r (return items to the left of r in a new line)
-> Encapsulation: Declare class variables as private, provide public getters and setters to acces and update those attributes.
   Eg: public class xyz { private int tip;
   //getter: public int getTip() { return x; } //getter format: public return type get'varname'() ; with initial letter in caps.
   //setter: void setTip(int newtip) { this.tip=newtip; } //setter format: void set'varname'(return type new'varname') ; initial caps.
-> Arraylists enable us to add or remove elements which a normal array can't. (import java.util.ArrayList;)
-> <E> stands for element, represents any type of object. 
----------------------
(2) Methods/Functions:
----------------------
public class temp 
{ static int myfunc(int x,int y) //need static call as main is static. 2 args based function with int return type.
  { return x+y+3;
  }
	public static void main(String args[])
	{	System.out.print(myfunc(3,3)); //3+3+3=9
	}
}
---------------------
public class temp 
{  static void myfunc(String x) //return void as we print in-function.
	 { System.out.print(x);
	 }
	public static void main(String args[])
	{	myfunc("hi"); //simple function call.
	}
}
------------
(3) Strings:
------------
Eg: String abc="xyz";

(a) Length: 
print(abc.length()); //3

(b) Upper/Lower case: 
print(abc.toUpperCase()); //XYZ
print(abc.toLowerCase()); //xyz

(c) Index positions:
print(abc.indexOf("z")); //2 (count from 0 -> array)

(d) Concat: (take another string. Eg: String abc2="xyz2";)
print(abc.concat(abc2));
//or add directly:
String mergedstring=abc+abc2;
print(mergedstring);

---------------
(4) Constructors:
---------------
Just like C++, with default and parameterized variants. (can use this pointer too)
Eg:
public class Car
{ int id;
  String model;
  public Car() { id=0; model="NULL"; } //Default con.
  public Car(int i,String m) { id=i; model=m; } //Parameterized con.
  public static void main(String args[])
  { Car Fordcar=new Car(1,"Mustang");
   print(Fordcar.id+Fordcar.model);
  }
}

----------
(5) Maths:
----------
(a) Max/Min: Eg: print(Math.max(5,3)+" "+Math.min(5,10)); //5 5
(b) Square root: Eg: print(Math.sqrt(36)); //6
(c) Absolute value: Eg: print(Math.abs(-36.6)); //36.6
(d) Random value: Eg: print(Maths.random()); //Any random value between 0 and 1. (inclusive of them)
(e) Trigonometry: Eg: print(Maths.cos(60)); //returns cosine(60) value.
//normal - cos(60) ; //hyperbolic - cosh(60) ; //arc - acos(60)
(f) Round-off: Eg: print(Maths.round(5.5)); //6 
(g) Cieling/Floor: Eg: print(Maths.ceil(5.5)); //6.0 ; print(Maths.floor(5.5)); //5.0
(h) Conversions: Maths.toDegrees(value); 
                 Maths.toRadians(value); 
(i) Logarithm: Maths.log(x); //natural log. 
               Maths.log10(x); //base10 log.

----------
(6) Arrays:
----------
Syntax: data_type[] name; 
        data_type[] name={element1,element2};
	data_type[][] name={{element11,elements12},{element21,element22}};
	
	Eg:
	(1) Single Foreach loop print:
	int[][] numlist={{1,2,3},{4,5,6,7,8}};
	String[] housetype={"Flat","Bungalow"};
	print(housetype.length+housetype[0]); //2Flat
	for(int i=0; i<housetype.length; i++) //Syntax like for(loop variable initially 0, till length of string (no.), inc/dec)
	{ print(cars[i]); }
	or
	for(String i:housetype) //'For each' i in string housetype.
	{ print(i);
	}
	
	(2)Using deepToString(arrayname) method for printing any mutlidimensional array:
	import java.util.*;
        public class xyz
        {
        public static void main(String[] args)
        {
        int[][] array = {{1, 2, 3, 4}, {5, 6, 7, 8}};
        System.out.println(Arrays.deepToString(array)); //prints array as it is.
        } 
        }
	//returns {{1, 2, 3, 4}, {5, 6, 7, 8}}
	
	(3) Using Nested Foreach loop:
	Let our considered array be:
	int[][] arr={{1,2,3},{4,5,6,7}};
	
	for(int[] newarr : arr)
	{ for(int newarr2 : newarr)
	  { System.out.print(newarr2+" ");
	  } System.out.println(); //or \n
	} 
	//returns : 1 2 3
	            4 5 6 7  
		    
        (4) Using toString() method:
	for (int[] val : arr) 
        {  System.out.println(Arrays.toString(val));
        }
	//returns : [1, 2, 3]
	            [4, 5, 6, 7]
	
--------------
(7) ArrayLists:
--------------	
Syntax: ArrayList<type> varname = new ArrayList<type>();
Eg: ArrayList<int> numberlist = new ArrayList<int>();
    numberlist.add(55); //55
    numberlist.add(33); //55,33
    numberlist.remove(0); //remove 55 at index 0.
    numberlist.set(0,23); //set 23 at index 0.
    numberlist.clear; //removes all elements in numberlist ArrayList.
    numberlist.size(); //returns number of elements in the numberlist ArrayList.
    hence a loop example would look like:
    for(int i=0; i<numberlist.size(); i++) { System.out.print(numberlist.get(i)); } //get is used to display //getter.
    import java.util.Collections;
    Collections.sort(numberlist); //Sort 
    for(String i:cars) { print(i); }
    
    
    

	
